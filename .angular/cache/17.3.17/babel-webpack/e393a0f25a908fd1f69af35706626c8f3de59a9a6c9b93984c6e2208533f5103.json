{"ast":null,"code":"import { ElementRef, Renderer2 } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let CountUpDirective = /*#__PURE__*/(() => {\n  class CountUpDirective {\n    constructor(el, renderer) {\n      this.el = el;\n      this.renderer = renderer;\n      this.endVal = 0;\n      this.duration = 1500;\n    }\n    ngAfterViewInit() {\n      const observer = new IntersectionObserver(([entry]) => {\n        if (entry.isIntersecting) {\n          this.animate();\n          observer.disconnect();\n        }\n      }, {\n        threshold: 0.4\n      });\n      observer.observe(this.el.nativeElement);\n    }\n    animate() {\n      let start = 0;\n      const step = Math.ceil(this.endVal / (this.duration / 16));\n      const update = () => {\n        start += step;\n        if (start >= this.endVal) {\n          start = this.endVal;\n        }\n        this.renderer.setProperty(this.el.nativeElement, 'textContent', start.toLocaleString());\n        if (start < this.endVal) {\n          requestAnimationFrame(update);\n        }\n      };\n      requestAnimationFrame(update);\n    }\n    static {\n      this.ɵfac = function CountUpDirective_Factory(t) {\n        return new (t || CountUpDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n      };\n    }\n    static {\n      this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n        type: CountUpDirective,\n        selectors: [[\"\", \"countUp\", \"\"]],\n        inputs: {\n          endVal: \"endVal\"\n        }\n      });\n    }\n  }\n  return CountUpDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}